
// Код программы для опыта №10:

// ********** ЖИДКО КРИСТАЛЛИЧЕСКИЙ ДИСПЛЕЙ (ЖКИ) *************

// Жидкокристаллический дисплей (ЖКИ), или по английски
// "Liquid Crystal Display" - LCD) представляет собой сложный
// электронный модуль, который может быть использован для
// отображения текста или числовых данных. Дисплей размещен в
// рамке, на печатной плате, имеет две строки по 16 символов,
// а также подсветку, для использования в темное время суток.

// Если вы пользовались монитором последовательного порта для
// вывода данных, вы увидите, схожесть его с ЖКИ, и нет
// необходимости тащить с собой большой компьютер.

// Этот урок покажет вам, как подключить LCD к вашему Arduino
// и как выводить на него любые данные.

// Подключение оборудования:

// ЖК-модуль имеет 16-штырьковый разъем, для удобства подключения 
// применяется и экономии портов Arduino, в наборе применяется 
// модуль, позволяющий подключить дисплей по I2C

// Соедините ЖКИ с вашей Arduino.
// 
// Дисплей  – Arduino
// GND – GND
// VCC – 5V
// SDA – A4
// SCL – A5

// После того, как соединено, загрузить скетч в Arduino,
// и отрегулируйте яркость потенциометром.

// Библиотека

// На плате ЖК находится чип, который управляет всеми сегментами
// дисплея, и подчиняется командам, посланным ему с Arduino.
// В чип заложены многочисленные точечные шаблоны, которые
// составляют все текстовые символы, таким образом экономя
// много времени.

// Чтобы общаться с этим чипом, мы будем использовать библиотеку
// LiquidCrystal_I2C, которая является одной из библиотек Arduino.
// Эта библиотека делает всю самую тяжелую работу. Все что вам остается
// - выбрать место на дисплее и отправить туда свои данные!

// Подсказки

// На индикаторной панели наклеена защитная пленка, которую
// можно аккуратно снять, но будте осторожны, индикаторную
// панель очень легко поцарапать.

// Как мы уже говорилось выше, потенциометр регулирует
// контрастность изображения на дисплее. Если вы ничего не
// видете, когда запускается скетч (программа), попробуйте
// покрутить ручку потенциометра, чтобы текст стал ясно виден.

// Подгузка библиотеки LiquidCrystal.h, которая даст нам
// возможность взаимодействия с ЖКИ без лишних сложностей:

// Описание функций и методов библиотеки LiquidCrystal_I2C:
// home() и clear() – первая функция позволяет вернуть курсор в начало экрана, вторая тоже, но при этом удаляет все, что было на мониторе до этого.
// write(ch) – позволяет вывести одиночный символ ch на экран.
// cursor() и noCursor() – показывает/скрывает курсор на экране.
// blink() и noBlink() – курсор мигает/не мигает (если до этого было включено его отображение).
// display() и noDisplay() – позволяет подключить/отключить дисплей.
// scrollDisplayLeft() и scrollDisplayRight() – прокручивает экран на один знак влево/вправо.
// autoscroll() и noAutoscroll() – позволяет включить/выключить режим автопрокручивания. В этом режиме каждый новый символ записывается в одном и том же месте, вытесняя ранее написанное на экране.
// leftToRight() и rightToLeft() – Установка направление выводимого текста – слева направо или справа налево.
// createChar(ch, bitmap) – создает символ с кодом ch (0 – 7), используя массив битовых масок bitmap для создания черных и белых точек.


#include <LiquidCrystal_I2C.h>

// Для дополнительной информации Вы можете посмотреть:
// http://arduino.cc/reference/en/libraries/liquidcrystal-i2c/

// Настройка адреса I2C, по которому находится дисплей
#define LCD_ADDRESS 0x27 

// Указываем количество строк экрана
#define LCD_ROWS 2

// Указываем количество символов в строке
#define LCD_COLUMNS 16

// Инициализация экрана
LiquidCrystal_I2C lcd(LCD_ADDRESS, LCD_COLUMNS, LCD_ROWS);


void setup()
{
  // Библиотека LiquidCrystal_I2C.h может использоваться с различными
  // типами ЖК устройств. Мы используем двухстрочный, шестнадцати
  // символьный ЖК индикатор. Поэтому здесь, ниже, мы информируем
  // об этом Arduino, укажем ей с какой частью библиотеки работаем:

  // Инициализация экрана
  lcd.init();

  // Включение подсветки
  lcd.backlight();

  // Данные отправленные на дисплей будут там оставаться, пока не
  // будут перезаписаны новой информацией, или до отключении питания.
  // Это может стать проблемой, - вы загружаете новый скетч в Arduino,
  // а на ЖК дисплее все еще видны данные от старой программы. Поэтому,
  // давайте очистим ЖК с помощью команды clear(),
  // из библиотеки LiquidCrystal_I2C:

  lcd.clear();

  // Теперь мы будем отображать сообщения на ЖК-дисплее!

  // Так же, как в любом мониторе, у ЖК есть курсор, который
  // определяет, в каком месте должны появится нужные данных. По умолчанию
  // этот курсор невидим, хотя вы можете сделать его видимым, но для
  // этого нужно использовать дополнительные команды библиотеки.

  // Когда дисплее включается, невидимый курсор устанавливается
  // в верхнем ряду, первого столбца.

  lcd.print("hello, world!"); // печать на ЖКИ сообщения

  // Регулировка контрастности (ВАЖНО!)

  // При запуске скетча (программы) впервые, есть шанс
  // что вы ничего не увидите на ЖК-дисплее. Это может произойти
  // потому, что контрастность еще не отрегулирована.
  // Не волнуйтесь, это легко исправить, и как только вы установите
  // нужные параметры, больше уже менять ничего не понадобится.

  // Запустите скетч, затем покрутите потенциометр, в разные стороны
  // пока на ЖК дисплее не появится текст "Hello, World!".
  // Если вы все еще не видете текст, проверить все соединения и
  // убедитесь, что скетч был успешно загружен в Arduino.
}

void loop()
{

  // Можно поместить невидимый курсор в любое место на ЖК дисплее
  // перед передачей данных. Местоположение определяется от нулевого
  // символа верхней строки. Верхняя строка - 0, нижняя строка - 1.
  // Столбцы считаются с нулевого символа с лева, до 15-го справа.

  // В дополнение к "Hello, World!"(привет, мир!) напечатанных ранее,
  // выведем на экран время в секундах, от последнего сброса Arduino.
  // Не забудьте, что данные, которые Вы отправляете на дисплей,
  // остаются там, пока Вы их не сотрете, командой "lcd.clear()",
  // или не отключите питание.

  // Здесь мы устанавливаем невидимый курсор в первый столбец (столбец 0),
  // второй строки (строка 1):

  lcd.setCursor(0, 1);

  // Теперь выведем на экран число секунд (millis() / 1000),
  // которое проработала Arduino от последнего перезапуска:

  lcd.print(millis() / 1000);

  // ПОДСКАЗКА: Так как увеличение чисел всегда растет в длину,
  // (1..10..20...100....1000) то новые посланные, всегда,
  // будут перекрывать предыдущие. Но, если Вы решите вывести на
  // экран уменьшение чисел (пример - обратный отсчет), то Вы
  // увидите на дисплее артефакты, как бы зависшие символы, это
  // происходит если новое значение короче старого.

  // Чтобы этого не происходило, Вы должны сначало стереть старое,
  // прежде чем записать новое. Это можно сделать перезаписав последнее
  // число пробелами.
  // Если Вы сотрете старое число и сразу запишете новое, никто, даже Вы
  // этого не заметит. Вот типичная последовательность кода:

  // lcd.setCursor(0,1);   // устанавливаем курсор в 0-ом столбце, 1 строка
  // lcd.print("       "); // стираем самое длинное число
  // lcd.setCursor(0,1);   // устанавливаем курсор в 0-ом столбце, 1 строка
  // lcd.print(millis()/1000); // печатаем число секунд после сброса
  
}
